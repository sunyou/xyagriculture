<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
	<bean id="passwordEncoder" class="com.ai.common.security.encrypt.PasswordEncoderSerivceImpl">
	<!-- md5,pian.not -->
		<property name="type" value="md5"/>
	</bean> 
	

   <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	<bean id="credentialsMatcher"
		class="com.ai.common.security.shiro.matcher.CustomCredentialsMatcher">
		<property name="passwordEncoder" ref="passwordEncoder"/>

	</bean>
	<bean id="loginRealm" class="com.ai.common.security.shiro.realm.LoginRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>
	
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<!-- org.apache.shiro.web.session.mgt.DefaultWebSessionManager -->
	<!-- org.apache.shiro.web.mgt.DefaultWebSecurityManager -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- <property name="sessionManager" ref="shiroSessionManager"/> -->
		<!-- <property name="cacheManager" ref="shiroCacheManager" /> -->
		<property name="rememberMeManager" ref="rememberMeManager"/>
		
		<property name="realm" ref="loginRealm" />
	</bean>
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/loginframe/login.html" />
		<!-- 登录成功后要跳转的连接() -->
		<!-- <property name="successUrl" value="/system/main"/> -->
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp, -->
		<property name="unauthorizedUrl" value="/" />
		
		
		
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->


		<property name="filterChainDefinitions">
			<value>
			 /Label/Traceback.html=anon
				/loginframe/login.html=anon
				/login/doLogin=anon
				/checkCode/codeValidate.ajax=anon
				/checkCode/code=anon
				/js/**=anon
				/content/**=anon
				/css/**=anon
				/images/**=anon
				/register/**=anon
				/Map/**=anon
				/sysmanage/getAreaInitValueByAreaId=anon
				/sysmanage/getAreaSelect=anon
				/file/upload.ajax=anon
				/**=authc
               
			</value>
		</property>
	</bean>
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- 会话读写实现类 -->
	<bean id="sessionDAO"
		class="com.ai.common.security.shiro.session.CustomSessionDAO">
	</bean>
	<!-- 会话管理器 -->
	<bean id="shiroSessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!--<property name="sessionDAO" ref="sessionDAO" /> -->
		<!-- <property name="globalSessionTimeout" value="1"/> <property name="sessionValidationScheduler" 
			ref="sessionValidationScheduler"/> <property name="sessionValidationSchedulerEnabled" 
			value="true"/> -->
	</bean>
	<!-- 定时清理僵尸session，Shiro会启用一个后台守护线程定时执行清理操作 用户直接关闭浏览器造成的孤立会话 -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<property name="interval" value="3600000" />
		<property name="sessionManager" ref="shiroSessionManager" />
	</bean>
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	
	
	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="sid"/>
	    <property name="httpOnly" value="true"/>
	    <property name="maxAge" value="-1"/>
	    <!-- sessionIdCookie：maxAge=-1表示浏览器关闭时失效此Cookie -->
	</bean>
	<!-- rememberMeCookie：即记住我的Cookie，保存时长30天 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="rememberMe"/>
	    <property name="httpOnly" value="true"/>
	    <property name="maxAge" value="2592000"/><!-- 30天 -->
	</bean>
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" 
	class="org.apache.shiro.web.mgt.CookieRememberMeManager">
	    <property name="cipherKey" value="
	#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
	     <property name="cookie" ref="rememberMeCookie"/>
	</bean>
	<!-- rememberMe管理器，cipherKey是加密rememberMe Cookie的密钥；默认AES算法； -->
</beans>